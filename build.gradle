import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id 'eclipse'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
    id("com.gradleup.shadow") version "9.0.0-beta12"
    id("xyz.jpenilla.run-velocity") version "2.3.1"
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'net.trim02'
version = '2.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "bluecoloredReleases"
        url = uri("https://repo.bluecolored.de/releases")
    }
    maven {
        name = "viaversion-repo"
        url = uri("https://repo.viaversion.com")
    }

}

dependencies {
    compileOnly("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT", "net.luckperms:api:5.4")
    annotationProcessor("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")
    implementation("com.technicjelle:UpdateChecker:2.5.1")
    implementation("com.electronwill.night-config:toml:3.6.0")
    compileOnly("io.papermc.paper:paper-api:1.21.8-R0.1-SNAPSHOT")
    compileOnly("com.viaversion:viaversion-api:5.5.1")

}

def targetJavaVersion = 21
java {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

tasks.named('shadowJar', ShadowJar) {
    archiveClassifier.set('')
    include('/com/technicjelle/**')
    include('*')
    include('/net/trim02/**')

    include('/com/electronwill/**')

}


tasks {
    runVelocity {
        // Configure the Velocity version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        velocityVersion("3.4.0-SNAPSHOT")
        runDirectory = file("${project.rootDir}/run/velocity" )
    }
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21.8")
        runDirectory = file("${project.rootDir}/run/paper")
        downloadPlugins {
            url("https://download.luckperms.net/1606/bukkit/loader/LuckPerms-Bukkit-5.5.17.jar")
            modrinth("ViaBackwards", "9FX5j3OU")
            modrinth("ViaVersion","b7fitAW8")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(targetJavaVersion)
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = ['version': project.version]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

project.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
